#!/usr/bin/env python3
import os, json, subprocess, time, re
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich import box

start = time.time()
PROJECT_DIR = Path(__file__).resolve().parent.parent
OUT_FILE = PROJECT_DIR / "agent/context.json"
console = Console()

def print_banner():
    console.print(Panel.fit(
        "[bold cyan]üß†  AOE2HD Agent Context Builder[/bold cyan]\n[bold cyan]üîç Scanning parsing environment...[/bold cyan]",
        border_style="green", padding=(1, 4), box=box.SQUARE
    ))

def get_git_branch():
    try:
        return subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], cwd=PROJECT_DIR).decode().strip()
    except:
        return None

def get_python_version():
    try:
        return subprocess.check_output(["python", "--version"]).decode().strip()
    except:
        return "unknown"

def summarize_file(path, max_lines=60):
    try:
        with open(path) as f:
            lines = f.readlines()
        return "\n".join(line.strip() for line in lines[:max_lines] if line.strip())
    except:
        return ""

def detect_parser_mode():
    path = PROJECT_DIR / "parse_replay.py"
    if not path.exists():
        return "unknown"
    content = path.read_text()
    if "parse_replay_full" in content:
        return "full"
    if "parse_replay_fast" in content:
        return "fast"
    return "unknown"

def detect_firebase_integration():
    path = PROJECT_DIR / "firebase_utils.py"
    return path.exists()

def detect_replay_parser_function():
    path = PROJECT_DIR / "utils/replay_parser.py"
    if not path.exists():
        return "missing"
    text = path.read_text()
    return "parse_replay_full" in text

def detect_api_targets():
    path = PROJECT_DIR / "config.json"
    if not path.exists():
        return []
    try:
        data = json.loads(path.read_text())
        return data.get("api_targets", [])
    except:
        return []

def detect_async_sql():
    reqs = PROJECT_DIR / "requirements.txt"
    if not reqs.exists():
        return False
    return "sqlalchemy[asyncio]" in reqs.read_text().lower()

def build_context():
    context = {
        "git_branch": get_git_branch(),
        "python_version": get_python_version(),
        "parser_mode": detect_parser_mode(),
        "firebase_integration": detect_firebase_integration(),
        "replay_parser_module": detect_replay_parser_function(),
        "api_targets": detect_api_targets(),
        "uses_async_sql": detect_async_sql(),
        "chat_model": "gpt-4",
        "notes": "Auto-generated by gptcontext.autogen.py"
    }

    files = {
        "README.md": PROJECT_DIR / "README.md",
        "watch_replays.py": PROJECT_DIR / "watch_replays.py",
        "parse_replay.py": PROJECT_DIR / "parse_replay.py",
        "requirements.txt": PROJECT_DIR / "requirements.txt"
    }

    for name, path in files.items():
        if path.exists():
            context[name] = summarize_file(path)

    return context

def write_context_file(context):
    with open(OUT_FILE, "w") as f:
        json.dump(context, f, indent=2)

    table = Table(title="üì¶ AOE2HD Parser Context Summary", box=box.SIMPLE_HEAVY)
    table.add_column("Key", style="green")
    table.add_column("Value", style="cyan")

    for key, val in context.items():
        display = ", ".join(val) if isinstance(val, list) else str(val)
        display = f"{len(val)} lines" if isinstance(val, str) and "\n" in val else display
        table.add_row(f"‚úÖ {key}", display if val else "[dim](empty)[/dim]")

    console.print(table)
    console.print(Panel.fit(
        f"[green]‚úÖ context.json updated[/green] ‚Üí [bold]{OUT_FILE}[/bold]\n‚è±Ô∏è [blue]Scan time:[/blue] {round(time.time() - start, 2)}s",
        title="üìÇ Output"
    ))

def main():
    print_banner()
    context = build_context()
    write_context_file(context)

if __name__ == "__main__":
    main()
